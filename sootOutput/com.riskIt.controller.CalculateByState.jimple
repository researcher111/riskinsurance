public class com.riskIt.controller.CalculateByState extends java.lang.Object implements com.riskIt.interfaces.CalculateByStateInterface
{
    java.sql.ResultSet results;
    java.sql.Statement statement;

    public java.util.ArrayList getStateList()
    {
        com.riskIt.controller.CalculateByState this;
        java.util.ArrayList stateList, temp$0;
        java.sql.Connection temp$1;
        java.sql.Statement temp$2, temp$3;
        java.sql.ResultSet temp$4, temp$5, temp$7, temp$9;
        boolean temp$6, temp$12;
        java.lang.String temp$8, temp$10, temp$11, temp$16, temp$17, temp$21, temp$24, temp$25;
        java.sql.SQLException e, temp$26;
        java.io.PrintStream temp$13, temp$14, temp$18, temp$22;
        java.lang.StringBuffer temp$15, temp$19, temp$23;
        int temp$20;

        this := @this: com.riskIt.controller.CalculateByState;
        temp$0 = new java.util.ArrayList;
        specialinvoke temp$0.<java.util.ArrayList: void <init>()>();
        stateList = temp$0;

     label0:
        nop;
        temp$1 = staticinvoke <com.riskIt.util.Factory: java.sql.Connection getConnection()>();
        temp$2 = interfaceinvoke temp$1.<java.sql.Connection: java.sql.Statement createStatement()>();
        this.<com.riskIt.controller.CalculateByState: java.sql.Statement statement> = temp$2;
        temp$3 = this.<com.riskIt.controller.CalculateByState: java.sql.Statement statement>;
        temp$4 = interfaceinvoke temp$3.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT DISTINCT STATENAME FROM ziptable");
        this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results> = temp$4;

     label1:
        nop;
        temp$5 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$6 = interfaceinvoke temp$5.<java.sql.ResultSet: boolean next()>();
        if temp$6 == 0 goto label5;

        goto label2;

     label2:
        nop;
        temp$7 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$8 = interfaceinvoke temp$7.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("STATENAME");
        if temp$8 != null goto label3;

        goto label4;

     label3:
        nop;
        temp$9 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$10 = interfaceinvoke temp$9.<java.sql.ResultSet: java.lang.String getString(int)>(1);
        temp$11 = virtualinvoke temp$10.<java.lang.String: java.lang.String trim()>();
        temp$12 = virtualinvoke stateList.<java.util.ArrayList: boolean add(java.lang.Object)>(temp$11);

     label4:
        nop;
        goto label1;

     label5:
        nop;
        goto label10;

     label6:
        nop;
        e := @caughtexception;

     label7:
        nop;
        if e != null goto label8;

        goto label9;

     label8:
        nop;
        temp$13 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$13.<java.io.PrintStream: void println(java.lang.String)>("\n----- SQLException -----");
        temp$14 = <java.lang.System: java.io.PrintStream err>;
        temp$15 = new java.lang.StringBuffer;
        specialinvoke temp$15.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("  SQL State:  ");
        temp$16 = virtualinvoke e.<java.sql.SQLException: java.lang.String getSQLState()>();
        virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$16);
        temp$17 = virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$14.<java.io.PrintStream: void println(java.lang.String)>(temp$17);
        temp$18 = <java.lang.System: java.io.PrintStream err>;
        temp$19 = new java.lang.StringBuffer;
        specialinvoke temp$19.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("  Error Code: ");
        temp$20 = virtualinvoke e.<java.sql.SQLException: int getErrorCode()>();
        virtualinvoke temp$19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$20);
        temp$21 = virtualinvoke temp$19.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$18.<java.io.PrintStream: void println(java.lang.String)>(temp$21);
        temp$22 = <java.lang.System: java.io.PrintStream err>;
        temp$23 = new java.lang.StringBuffer;
        specialinvoke temp$23.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("  Message:    ");
        temp$24 = virtualinvoke e.<java.sql.SQLException: java.lang.String getMessage()>();
        virtualinvoke temp$23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$24);
        temp$25 = virtualinvoke temp$23.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$22.<java.io.PrintStream: void println(java.lang.String)>(temp$25);
        temp$26 = virtualinvoke e.<java.sql.SQLException: java.sql.SQLException getNextException()>();
        e = temp$26;
        goto label7;

     label9:
        nop;
        nop;
        goto label10;

     label10:
        nop;
        staticinvoke <java.util.Collections: void sort(java.util.List)>(stateList);
        return stateList;

        catch java.sql.SQLException from label0 to label6 with label6;
    }

    public boolean isInStateList(java.lang.String)
    {
        com.riskIt.controller.CalculateByState this;
        java.lang.String state, temp$1, temp$2, i, temp$6;
        java.util.ArrayList stateList, temp$0;
        java.util.Iterator temp$3;
        boolean temp$4, temp$7, temp$8, temp$9;
        java.lang.Object temp$5;

        this := @this: com.riskIt.controller.CalculateByState;
        state := @parameter0: java.lang.String;
        temp$0 = virtualinvoke this.<com.riskIt.controller.CalculateByState: java.util.ArrayList getStateList()>();
        stateList = temp$0;
        if state == null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = "";
        state = temp$1;
        goto label2;

     label1:
        nop;
        temp$2 = virtualinvoke state.<java.lang.String: java.lang.String trim()>();
        state = temp$2;

     label2:
        nop;
        temp$3 = interfaceinvoke stateList.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        nop;
        temp$4 = interfaceinvoke temp$3.<java.util.Iterator: boolean hasNext()>();
        if temp$4 == 0 goto label6;

        temp$5 = interfaceinvoke temp$3.<java.util.Iterator: java.lang.Object next()>();
        i = (java.lang.String) temp$5;
        temp$6 = virtualinvoke i.<java.lang.String: java.lang.String trim()>();
        temp$7 = virtualinvoke temp$6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(state);
        if temp$7 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$8 = 1;
        return temp$8;

     label5:
        nop;
        nop;
        goto label3;

     label6:
        nop;
        temp$9 = 0;
        return temp$9;
    }

    public double calculateIncomeByState(java.lang.String)
    {
        com.riskIt.controller.CalculateByState this;
        java.lang.String state;
        com.riskIt.interfaces.CalcImplInterface temp$0;
        double temp$1;

        this := @this: com.riskIt.controller.CalculateByState;
        state := @parameter0: java.lang.String;
        temp$0 = staticinvoke <com.riskIt.util.Factory: com.riskIt.interfaces.CalcImplInterface getYearlyImpl()>();
        temp$1 = virtualinvoke this.<com.riskIt.controller.CalculateByState: double calculateIncome(java.lang.String,com.riskIt.interfaces.CalcImplInterface)>(state, temp$0);
        return temp$1;
    }

    public double calculateWeeklyWageByState(java.lang.String)
    {
        com.riskIt.controller.CalculateByState this;
        java.lang.String state;
        com.riskIt.interfaces.CalcImplInterface temp$0;
        double temp$1;

        this := @this: com.riskIt.controller.CalculateByState;
        state := @parameter0: java.lang.String;
        temp$0 = staticinvoke <com.riskIt.util.Factory: com.riskIt.interfaces.CalcImplInterface getWeeklyImpl()>();
        temp$1 = virtualinvoke this.<com.riskIt.controller.CalculateByState: double calculateIncome(java.lang.String,com.riskIt.interfaces.CalcImplInterface)>(state, temp$0);
        return temp$1;
    }

    public double calculateIncomeByAllStates()
    {
        com.riskIt.controller.CalculateByState this;
        com.riskIt.interfaces.CalcImplInterface temp$0;
        double temp$1;

        this := @this: com.riskIt.controller.CalculateByState;
        temp$0 = staticinvoke <com.riskIt.util.Factory: com.riskIt.interfaces.CalcImplInterface getYearlyImpl()>();
        temp$1 = virtualinvoke this.<com.riskIt.controller.CalculateByState: double calculateIncome(java.lang.String,com.riskIt.interfaces.CalcImplInterface)>("all", temp$0);
        return temp$1;
    }

    public double calculagteWeeklyWageByAllState()
    {
        com.riskIt.controller.CalculateByState this;
        com.riskIt.interfaces.CalcImplInterface temp$0;
        double temp$1;

        this := @this: com.riskIt.controller.CalculateByState;
        temp$0 = staticinvoke <com.riskIt.util.Factory: com.riskIt.interfaces.CalcImplInterface getWeeklyImpl()>();
        temp$1 = virtualinvoke this.<com.riskIt.controller.CalculateByState: double calculateIncome(java.lang.String,com.riskIt.interfaces.CalcImplInterface)>("all", temp$0);
        return temp$1;
    }

    private final double calculateIncome(java.lang.String, com.riskIt.interfaces.CalcImplInterface)
    {
        com.riskIt.controller.CalculateByState this;
        java.lang.String stateIn, stateCode, temp$5, temp$6, temp$17, temp$19, temp$25, temp$27, temp$29, temp$31, temp$33, zip, temp$67, temp$70, temp$71, temp$72, temp$105, temp$106, temp$110, temp$113, temp$114;
        com.riskIt.interfaces.CalcImplInterface type;
        double returnValue, sum, count, result, temp$92, temp$94, temp$95, temp$96, temp$97, temp$98, temp$100, temp$101, temp$117;
        java.util.HashMap ssnZipHM, temp$0, zipStateHM, temp$1, ssnWageHM, temp$2, ssnWorkWeeks, temp$3;
        int weekWage, workWeeks, temp$14, temp$39, temp$41, temp$44, temp$49, temp$51, temp$54, keySSN, temp$76, temp$80, temp$84, temp$88, temp$93, temp$99, temp$109;
        java.util.ArrayList stateWageAL, temp$4;
        java.sql.Connection temp$7;
        java.sql.Statement temp$8, temp$9, temp$20, temp$34;
        java.sql.ResultSet temp$10, temp$11, temp$13, temp$16, temp$21, temp$22, temp$24, temp$26, temp$28, temp$30, temp$35, temp$36, temp$38, temp$40, temp$43, temp$48, temp$50, temp$53;
        boolean temp$12, temp$23, temp$37, temp$62, temp$68, temp$90;
        java.lang.Integer temp$15, temp$42, temp$45, temp$47, temp$52, temp$55, temp$57, temp$64, temp$65, temp$73, temp$75, temp$77, temp$79, temp$81, temp$83, temp$85, temp$87;
        java.lang.Object temp$18, temp$32, temp$46, temp$56, temp$63, temp$66, temp$69, temp$74, temp$78, temp$82, temp$86, temp$91;
        java.util.Iterator i, temp$60, temp$61, temp$89;
        java.util.Set temp$58, temp$59;
        com.riskIt.interfaces.TypeWageDataStructureInterface i;
        java.sql.SQLException e, temp$115;
        java.io.PrintStream temp$102, temp$103, temp$107, temp$111;
        java.lang.StringBuffer temp$104, temp$108, temp$112;
        java.lang.IllegalArgumentException temp$116;

        this := @this: com.riskIt.controller.CalculateByState;
        stateIn := @parameter0: java.lang.String;
        type := @parameter1: com.riskIt.interfaces.CalcImplInterface;
        returnValue = 0.0;
        temp$0 = new java.util.HashMap;
        specialinvoke temp$0.<java.util.HashMap: void <init>()>();
        ssnZipHM = temp$0;
        temp$1 = new java.util.HashMap;
        specialinvoke temp$1.<java.util.HashMap: void <init>()>();
        zipStateHM = temp$1;
        temp$2 = new java.util.HashMap;
        specialinvoke temp$2.<java.util.HashMap: void <init>()>();
        ssnWageHM = temp$2;
        temp$3 = new java.util.HashMap;
        specialinvoke temp$3.<java.util.HashMap: void <init>()>();
        ssnWorkWeeks = temp$3;
        stateCode = null;
        weekWage = 0;
        workWeeks = 0;
        temp$4 = new java.util.ArrayList;
        specialinvoke temp$4.<java.util.ArrayList: void <init>()>();
        stateWageAL = temp$4;
        sum = 0.0;
        count = 0.0;
        if stateIn == null goto label0;

        goto label1;

     label0:
        nop;
        temp$5 = "bad_value_return_0";
        stateIn = temp$5;
        goto label2;

     label1:
        nop;
        temp$6 = virtualinvoke stateIn.<java.lang.String: java.lang.String trim()>();
        stateIn = temp$6;

     label2:
        nop;

     label3:
        nop;
        temp$7 = staticinvoke <com.riskIt.util.Factory: java.sql.Connection getConnection()>();
        temp$8 = interfaceinvoke temp$7.<java.sql.Connection: java.sql.Statement createStatement()>();
        this.<com.riskIt.controller.CalculateByState: java.sql.Statement statement> = temp$8;
        temp$9 = this.<com.riskIt.controller.CalculateByState: java.sql.Statement statement>;
        temp$10 = interfaceinvoke temp$9.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT SSN, ZIP from userrecord WHERE ZIP IS NOT NULL");
        this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results> = temp$10;

     label4:
        nop;
        temp$11 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$12 = interfaceinvoke temp$11.<java.sql.ResultSet: boolean next()>();
        if temp$12 == 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$13 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$14 = interfaceinvoke temp$13.<java.sql.ResultSet: int getInt(java.lang.String)>("SSN");
        temp$15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$14);
        temp$16 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$17 = interfaceinvoke temp$16.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("ZIP");
        temp$18 = virtualinvoke ssnZipHM.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(temp$15, temp$17);
        temp$19 = (java.lang.String) temp$18;
        goto label4;

     label6:
        nop;
        temp$20 = this.<com.riskIt.controller.CalculateByState: java.sql.Statement statement>;
        temp$21 = interfaceinvoke temp$20.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT ZIP, STATENAME from ziptable");
        this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results> = temp$21;

     label7:
        nop;
        temp$22 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$23 = interfaceinvoke temp$22.<java.sql.ResultSet: boolean next()>();
        if temp$23 == 0 goto label13;

        goto label8;

     label8:
        nop;
        temp$24 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$25 = interfaceinvoke temp$24.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("ZIP");
        if temp$25 == null goto label10;

        goto label9;

     label9:
        nop;
        temp$26 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$27 = interfaceinvoke temp$26.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("STATENAME");
        if temp$27 == null goto label10;

        goto label12;

        goto label12;

     label10:
        nop;

     label11:
        nop;
        goto label7;

     label12:
        nop;
        temp$28 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$29 = interfaceinvoke temp$28.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("ZIP");
        temp$30 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$31 = interfaceinvoke temp$30.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("STATENAME");
        temp$32 = virtualinvoke zipStateHM.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(temp$29, temp$31);
        temp$33 = (java.lang.String) temp$32;
        goto label7;

     label13:
        nop;
        temp$34 = this.<com.riskIt.controller.CalculateByState: java.sql.Statement statement>;
        temp$35 = interfaceinvoke temp$34.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT SSN, WEEKWAGE, WORKWEEKS from job");
        this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results> = temp$35;

     label14:
        nop;
        temp$36 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$37 = interfaceinvoke temp$36.<java.sql.ResultSet: boolean next()>();
        if temp$37 == 0 goto label20;

        goto label15;

     label15:
        nop;
        temp$38 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$39 = interfaceinvoke temp$38.<java.sql.ResultSet: int getInt(java.lang.String)>("WEEKWAGE");
        if temp$39 > 0 goto label16;

        goto label17;

     label16:
        nop;
        temp$40 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$41 = interfaceinvoke temp$40.<java.sql.ResultSet: int getInt(java.lang.String)>("SSN");
        temp$42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$41);
        temp$43 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$44 = interfaceinvoke temp$43.<java.sql.ResultSet: int getInt(java.lang.String)>("WEEKWAGE");
        temp$45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$44);
        temp$46 = virtualinvoke ssnWageHM.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(temp$42, temp$45);
        temp$47 = (java.lang.Integer) temp$46;

     label17:
        nop;
        temp$48 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$49 = interfaceinvoke temp$48.<java.sql.ResultSet: int getInt(java.lang.String)>("WORKWEEKS");
        if temp$49 > 0 goto label18;

        goto label19;

     label18:
        nop;
        temp$50 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$51 = interfaceinvoke temp$50.<java.sql.ResultSet: int getInt(java.lang.String)>("SSN");
        temp$52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$51);
        temp$53 = this.<com.riskIt.controller.CalculateByState: java.sql.ResultSet results>;
        temp$54 = interfaceinvoke temp$53.<java.sql.ResultSet: int getInt(java.lang.String)>("WORKWEEKS");
        temp$55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$54);
        temp$56 = virtualinvoke ssnWorkWeeks.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(temp$52, temp$55);
        temp$57 = (java.lang.Integer) temp$56;

     label19:
        nop;
        goto label14;

     label20:
        nop;
        temp$58 = virtualinvoke ssnZipHM.<java.util.HashMap: java.util.Set keySet()>();
        temp$59 = (java.util.Set) temp$58;
        temp$60 = interfaceinvoke temp$59.<java.util.Set: java.util.Iterator iterator()>();
        temp$61 = (java.util.Iterator) temp$60;
        i = temp$61;

     label21:
        nop;
        temp$62 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if temp$62 == 0 goto label35;

        goto label22;

     label22:
        nop;
        temp$63 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        temp$64 = (java.lang.Integer) temp$63;
        keySSN = virtualinvoke temp$64.<java.lang.Integer: int intValue()>();
        temp$65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(keySSN);
        temp$66 = virtualinvoke ssnZipHM.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(temp$65);
        temp$67 = (java.lang.String) temp$66;
        zip = temp$67;
        if zip != null goto label23;

        goto label27;

     label23:
        nop;
        temp$68 = virtualinvoke zip.<java.lang.String: boolean equals(java.lang.Object)>("");
        if temp$68 == 0 goto label24;

        goto label27;

        goto label24;

     label24:
        nop;
        temp$69 = virtualinvoke zipStateHM.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(zip);
        temp$70 = (java.lang.String) temp$69;
        stateCode = temp$70;
        if stateCode != null goto label25;

        goto label26;

     label25:
        nop;
        temp$71 = virtualinvoke stateCode.<java.lang.String: java.lang.String trim()>();
        stateCode = temp$71;

     label26:
        nop;
        goto label28;

     label27:
        nop;
        temp$72 = null;
        stateCode = temp$72;

     label28:
        nop;
        temp$73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(keySSN);
        temp$74 = virtualinvoke ssnWageHM.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(temp$73);
        temp$75 = (java.lang.Integer) temp$74;
        if temp$75 == null goto label29;

        goto label30;

     label29:
        nop;
        temp$76 = 0;
        weekWage = temp$76;
        goto label31;

     label30:
        nop;
        temp$77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(keySSN);
        temp$78 = virtualinvoke ssnWageHM.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(temp$77);
        temp$79 = (java.lang.Integer) temp$78;
        temp$80 = virtualinvoke temp$79.<java.lang.Integer: int intValue()>();
        weekWage = temp$80;

     label31:
        nop;
        temp$81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(keySSN);
        temp$82 = virtualinvoke ssnWorkWeeks.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(temp$81);
        temp$83 = (java.lang.Integer) temp$82;
        if temp$83 == null goto label32;

        goto label33;

     label32:
        nop;
        temp$84 = 0;
        workWeeks = temp$84;
        goto label34;

     label33:
        nop;
        temp$85 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(keySSN);
        temp$86 = virtualinvoke ssnWorkWeeks.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(temp$85);
        temp$87 = (java.lang.Integer) temp$86;
        temp$88 = virtualinvoke temp$87.<java.lang.Integer: int intValue()>();
        workWeeks = temp$88;

     label34:
        nop;
        interfaceinvoke type.<com.riskIt.interfaces.CalcImplInterface: void addToArrayList(java.util.ArrayList,java.lang.String,int,int)>(stateWageAL, stateCode, weekWage, workWeeks);
        nop;
        goto label21;

     label35:
        nop;
        temp$89 = interfaceinvoke stateWageAL.<java.lang.Iterable: java.util.Iterator iterator()>();

     label36:
        nop;
        temp$90 = interfaceinvoke temp$89.<java.util.Iterator: boolean hasNext()>();
        if temp$90 == 0 goto label39;

        temp$91 = interfaceinvoke temp$89.<java.util.Iterator: java.lang.Object next()>();
        i = (com.riskIt.interfaces.TypeWageDataStructureInterface) temp$91;
        temp$92 = interfaceinvoke type.<com.riskIt.interfaces.CalcImplInterface: double calculateAverage(java.lang.String,com.riskIt.interfaces.TypeWageDataStructureInterface)>(stateIn, i);
        result = temp$92;
        temp$93 = result cmpl 0.0;
        if temp$93 <= 0 goto label38;

        goto label37;

     label37:
        nop;
        temp$94 = sum;
        temp$95 = temp$94 + result;
        sum = temp$95;
        temp$96 = count;
        temp$97 = (double) 1;
        temp$98 = temp$96 + temp$97;
        count = temp$98;

     label38:
        nop;
        nop;
        goto label36;

     label39:
        nop;
        temp$99 = count cmpg 0.0;
        if temp$99 != 0 goto label41;

        goto label40;

     label40:
        nop;
        temp$100 = 0.0;
        returnValue = temp$100;
        goto label42;

     label41:
        nop;
        temp$101 = sum / count;
        returnValue = temp$101;

     label42:
        nop;
        goto label47;

     label43:
        nop;
        e := @caughtexception;

     label44:
        nop;
        if e != null goto label45;

        goto label46;

     label45:
        nop;
        temp$102 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$102.<java.io.PrintStream: void println(java.lang.String)>("\n----- SQLException -----");
        temp$103 = <java.lang.System: java.io.PrintStream err>;
        temp$104 = new java.lang.StringBuffer;
        specialinvoke temp$104.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("  SQL State:  ");
        temp$105 = virtualinvoke e.<java.sql.SQLException: java.lang.String getSQLState()>();
        virtualinvoke temp$104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$105);
        temp$106 = virtualinvoke temp$104.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$103.<java.io.PrintStream: void println(java.lang.String)>(temp$106);
        temp$107 = <java.lang.System: java.io.PrintStream err>;
        temp$108 = new java.lang.StringBuffer;
        specialinvoke temp$108.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("  Error Code: ");
        temp$109 = virtualinvoke e.<java.sql.SQLException: int getErrorCode()>();
        virtualinvoke temp$108.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$109);
        temp$110 = virtualinvoke temp$108.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$107.<java.io.PrintStream: void println(java.lang.String)>(temp$110);
        temp$111 = <java.lang.System: java.io.PrintStream err>;
        temp$112 = new java.lang.StringBuffer;
        specialinvoke temp$112.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$112.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("  Message:    ");
        temp$113 = virtualinvoke e.<java.sql.SQLException: java.lang.String getMessage()>();
        virtualinvoke temp$112.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$113);
        temp$114 = virtualinvoke temp$112.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$111.<java.io.PrintStream: void println(java.lang.String)>(temp$114);
        temp$115 = virtualinvoke e.<java.sql.SQLException: java.sql.SQLException getNextException()>();
        e = temp$115;
        goto label44;

     label46:
        nop;
        temp$116 = new java.lang.IllegalArgumentException;
        specialinvoke temp$116.<java.lang.IllegalArgumentException: void <init>()>();
        throw temp$116;

     label47:
        nop;
        temp$117 = staticinvoke <com.riskIt.util.Factory: double getRoundMethod(double)>(returnValue);
        return temp$117;

        catch java.sql.SQLException from label3 to label11 with label43;
        catch java.sql.SQLException from label12 to label43 with label43;
    }

    public void <init>()
    {
        com.riskIt.controller.CalculateByState this;

        this := @this: com.riskIt.controller.CalculateByState;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
